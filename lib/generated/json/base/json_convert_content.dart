// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:ShareDemo/data/bean/test_entity.dart';
import 'package:ShareDemo/generated/json/test_entity_helper.dart';
import 'package:ShareDemo/data/bean/ResponseFromPluginEntity.dart';
import 'package:ShareDemo/generated/json/ResponseFromPluginEntity_helper.dart';
import 'package:ShareDemo/data/bean/joke_bean_entity.dart';
import 'package:ShareDemo/generated/json/joke_bean_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TestEntity:
				return testEntityFromJson(data as TestEntity, json) as T;
			case TestResult:
				return testResultFromJson(data as TestResult, json) as T;
			case TestResultData:
				return testResultDataFromJson(data as TestResultData, json) as T;
			case ResponseFromPluginEntity:
				return responseFromPluginEntityFromJson(data as ResponseFromPluginEntity, json) as T;
			case ResponseFromPluginResult:
				return responseFromPluginResultFromJson(data as ResponseFromPluginResult, json) as T;
			case ResponseFromPluginResultData:
				return responseFromPluginResultDataFromJson(data as ResponseFromPluginResultData, json) as T;
			case JokeBeanEntity:
				return jokeBeanEntityFromJson(data as JokeBeanEntity, json) as T;
			case JokeBeanResult:
				return jokeBeanResultFromJson(data as JokeBeanResult, json) as T;
			case JokeBeanResultData:
				return jokeBeanResultDataFromJson(data as JokeBeanResultData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TestEntity:
				return testEntityToJson(data as TestEntity);
			case TestResult:
				return testResultToJson(data as TestResult);
			case TestResultData:
				return testResultDataToJson(data as TestResultData);
			case ResponseFromPluginEntity:
				return responseFromPluginEntityToJson(data as ResponseFromPluginEntity);
			case ResponseFromPluginResult:
				return responseFromPluginResultToJson(data as ResponseFromPluginResult);
			case ResponseFromPluginResultData:
				return responseFromPluginResultDataToJson(data as ResponseFromPluginResultData);
			case JokeBeanEntity:
				return jokeBeanEntityToJson(data as JokeBeanEntity);
			case JokeBeanResult:
				return jokeBeanResultToJson(data as JokeBeanResult);
			case JokeBeanResultData:
				return jokeBeanResultDataToJson(data as JokeBeanResultData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TestEntity).toString()){
			return TestEntity().fromJson(json);
		}
		if(type == (TestResult).toString()){
			return TestResult().fromJson(json);
		}
		if(type == (TestResultData).toString()){
			return TestResultData().fromJson(json);
		}
		if(type == (ResponseFromPluginEntity).toString()){
			return ResponseFromPluginEntity().fromJson(json);
		}
		if(type == (ResponseFromPluginResult).toString()){
			return ResponseFromPluginResult().fromJson(json);
		}
		if(type == (ResponseFromPluginResultData).toString()){
			return ResponseFromPluginResultData().fromJson(json);
		}
		if(type == (JokeBeanEntity).toString()){
			return JokeBeanEntity().fromJson(json);
		}
		if(type == (JokeBeanResult).toString()){
			return JokeBeanResult().fromJson(json);
		}
		if(type == (JokeBeanResultData).toString()){
			return JokeBeanResultData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TestEntity>[] is M){
			return data.map<TestEntity>((e) => TestEntity().fromJson(e)).toList() as M;
		}
		if(<TestResult>[] is M){
			return data.map<TestResult>((e) => TestResult().fromJson(e)).toList() as M;
		}
		if(<TestResultData>[] is M){
			return data.map<TestResultData>((e) => TestResultData().fromJson(e)).toList() as M;
		}
		if(<ResponseFromPluginEntity>[] is M){
			return data.map<ResponseFromPluginEntity>((e) => ResponseFromPluginEntity().fromJson(e)).toList() as M;
		}
		if(<ResponseFromPluginResult>[] is M){
			return data.map<ResponseFromPluginResult>((e) => ResponseFromPluginResult().fromJson(e)).toList() as M;
		}
		if(<ResponseFromPluginResultData>[] is M){
			return data.map<ResponseFromPluginResultData>((e) => ResponseFromPluginResultData().fromJson(e)).toList() as M;
		}
		if(<JokeBeanEntity>[] is M){
			return data.map<JokeBeanEntity>((e) => JokeBeanEntity().fromJson(e)).toList() as M;
		}
		if(<JokeBeanResult>[] is M){
			return data.map<JokeBeanResult>((e) => JokeBeanResult().fromJson(e)).toList() as M;
		}
		if(<JokeBeanResultData>[] is M){
			return data.map<JokeBeanResultData>((e) => JokeBeanResultData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}